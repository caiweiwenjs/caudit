<?php 
function U($params,$redirect=false){ if(is_string($params)){ if(substr($params,0,4) == 'url:'){ parse_str(substr($params,4),$params); }else{ return $params; } } $file = basename($_SERVER['SCRIPT_NAME']); if(!is_array($params)) return $file; if(isset($params['app'])){ $file = $params['app'].'.php'; unset($params['app']); } if(!isset($params['a'])){ $params = array_merge(array('a'=>ACTION_NAME),$params); } return $file.'?'.http_build_query($params); } function redirect($url,$time=0,$msg=''){ $url = str_replace(array("\n", "\r"), '', $url); if(empty($msg)) $msg = "系统将在{$time}秒之后自动跳转到{$url}！"; if (!headers_sent()) { if(0===$time) { header("Location: ".$url); }else { header("refresh:{$time};url={$url}"); echo($msg); } exit(); }else{ $str = "<meta http-equiv='Refresh' content='{$time};URL={$url}'>"; if($time!=0) $str .= $msg; exit($str); } } function F($name,$value='',$path=CACHE_PATH){ static $_cache = array(); $filename = $path.$name.'.php'; if('' !== $value){ if(is_null($value)) { return unlink($filename); }else{ $dir = dirname($filename); if(!is_dir($dir)) mkdir($dir); return file_put_contents($filename,"<?php\nreturn ".var_export($value,true).";\n?>"); } } if(isset($_cache[$name])) return $_cache[$name]; if(is_file($filename)) { $value = include $filename; $_cache[$name] = $value; }else{ $value = false; } return $value; } function set_cache($name,$value,$path=''){ if($path=='') $path = CACHE_PATH.'data/'; $filename = $path.$name.'.php'; if('' !== $value) { if(is_null($value)) { return unlink($filename); }else{ $dir = dirname($filename); if(!is_dir($dir)) mkdir($dir); return file_put_contents($filename,"<?php\nreturn ".var_export($value,true).";\n?>"); } } } function get_cache($name,$expire=7200,$path=''){ if($path=='') $path = CACHE_PATH.'data/'; static $_cache = array(); $filename = $path.$name.'.php'; if(isset($_cache[$name])) return $_cache[$name]; if(is_file($filename)) { if(time() > filemtime($filename) + $expire){ $value = false; }else{ $value = include $filename; $_cache[$name] = $value; } }else{ $value = false; } return $value; } function parse_name($name,$type=0){ if($type){ return ucfirst(preg_replace("/_([a-zA-Z])/e", "strtoupper('\\1')", $name)); }else{ $name = preg_replace("/[A-Z]/", "_\\0", $name); return strtolower(trim($name, "_")); } } function list_to_tree($list, $pk='id',$pid = 'pid',$child = '_child',$root=0){ $tree = array(); if(is_array($list)) { $refer = array(); foreach($list as $key => $data){ $refer[$data[$pk]] =& $list[$key]; } foreach($list as $key => $data){ $parentId = $data[$pid]; if($root == $parentId) { $tree[] =& $list[$key]; }else{ if(isset($refer[$parentId])){ $parent =& $refer[$parentId]; $parent[$child][] =& $list[$key]; } } } } return $tree; } function tree_to_list($tree,$depth=0,$left=10){ static $myarray=array(); static $depth; foreach($tree as $v){ $space='margin-left:'.$left*$depth.'px'; $depth % 2==0?$color='':$color='color:green'; $temp=$v; unset($temp['_child']); $temp['space']=$space; $temp['color']=$color; $myarray[]=$temp; empty($v['_child'])?'':tree_to_list($v['_child'],++$depth); } $depth!=0?--$depth:''; return $myarray; } function throw_error($msg){ echo $msg; exit(); } function require_cache($filename,$path=''){ static $_importFiles = array(); $filename = realpath($path.$filename); if (!isset($_importFiles[$filename])) { if(file_exists($filename)){ require $filename; $_importFiles[$filename] = true; }else{ $_importFiles[$filename] = false; } } return $_importFiles[$filename]; } function import($class,$type='extend',$ext='.class.php'){ if($type=='action' || $type=='model'){ $ext = $type == 'action' ? 'Action.class.php' : 'Model.class.php'; $file = APP_ROOT.$type.'/'.APP_NAME.'/'.$class.$ext; if(!is_file($file)){ $file = APP_ROOT.$type.'/'.$class.$ext; } }elseif($type=='core' || $type=='extend'){ $file = APP_ROOT.'lib/'.$type.'/'.$class.$ext; }else{ return false; } return require_cache($file); } function M($name='',$base=''){ static $_model = array(); $key = $name=='' ? 'default' : $name; if(isset($_model[$key])) return $_model[$key]; if(import($name,'model')==false){ import($base,'model'); $Model = $base.'Model'; }else{ $Model = $name.'Model'; } $_model[$key] = new $Model(); return $_model[$key]; } function A($name='',$base=''){ static $_action = array(); $key = $name=='' ? 'default' : $name; if(isset($_action[$key])) return $_action[$key]; if(import($name,'action')==false){ import($base,'action'); $Action = $base.'Action'; }else{ $Action = $name.'Action'; } $_action[$key] = new $Action(); return $_action[$key]; } function model($params=array()){ $name = isset($params['name']) ? $params['name'] : ''; $fun = isset($params['fun']) ? $params['fun'] : 'get_list'; if(isset($params['cache'])){ $key = md5(serialize($params).'model'); $result = get_cache($key,$params['cache']); if($result === false){ $model = M($name); $result = $model->$fun($params); set_cache($key,$result); } }else{ $model = M($name); $result = $model->$fun($params); } return $result; } function getpic($pic,$width=800,$height=0,$cut=true,$water=false,$nopic=''){ if(!file_exists($pic)){ if($nopic == '') return APP_ROOT.'template/common/images/nopic.gif'; return $nopic; } $pathinfo = pathinfo($pic); $picext = $pathinfo['extension']; $picname = md5($pic); $picpath = substr($picname,0,1); $picpath = CACHE_PATH.'images/'.$picpath; if(!is_dir($picpath)){ mkdir($picpath,0777); } $newpic=$picpath.'/'.$picname.'.'.$width.'x'.$height.'.'.$picext; if(file_exists($newpic)){ return $newpic; }else{ import('Image'); $info=Image::thumb($pic,$newpic,$width,$height,$cut); if($water) Image::water($newpic,'',APP_ROOT.'template/common/images/water.png'); return $newpic; } } function _authcode($string, $operation = 'DECODE', $key = '', $expiry = 0) { $ckey_length = 4; $key = md5($key ? $key : AUTH_KEY); $keya = md5(substr($key, 0, 16)); $keyb = md5(substr($key, 16, 16)); $keyc = $ckey_length ? ($operation == 'DECODE' ? substr($string, 0, $ckey_length): substr(md5(microtime()), -$ckey_length)) : ''; $cryptkey = $keya.md5($keya.$keyc); $key_length = strlen($cryptkey); $string = $operation == 'DECODE' ? base64_decode(substr($string, $ckey_length)) : sprintf('%010d', $expiry ? $expiry + time() : 0).substr(md5($string.$keyb), 0, 16).$string; $string_length = strlen($string); $result = ''; $box = range(0, 255); $rndkey = array(); for($i = 0; $i <= 255; $i++) { $rndkey[$i] = ord($cryptkey[$i % $key_length]); } for($j = $i = 0; $i < 256; $i++) { $j = ($j + $box[$i] + $rndkey[$i]) % 256; $tmp = $box[$i]; $box[$i] = $box[$j]; $box[$j] = $tmp; } for($a = $j = $i = 0; $i < $string_length; $i++) { $a = ($a + 1) % 256; $j = ($j + $box[$a]) % 256; $tmp = $box[$a]; $box[$a] = $box[$j]; $box[$j] = $tmp; $result .= chr(ord($string[$i]) ^ ($box[($box[$a] + $box[$j]) % 256])); } if($operation == 'DECODE') { if((substr($result, 0, 10) == 0 || substr($result, 0, 10) - time() > 0) && substr($result, 10, 16) == substr(md5(substr($result, 26).$keyb), 0, 16)) { return substr($result, 26); } else { return ''; } } else { return $keyc.str_replace('=', '', base64_encode($result)); } } function writespace($num){ for($i=0;$i<$num;$i++){ $content.='&nbsp;'; } return $content; } function myselect($arr,$default=false,$depth=0,$left=2){ if(!$arr) return false; static $depth=0; if(!is_array($arr)){ $tmp=explode(',',$arr); foreach($tmp as $v){ $tt=explode(':',$v); $a[]=array( 'text'=>$tt[0], 'value'=>$tt[1], ); } myselect($a,$default); }else{ foreach($arr as $v){ (string)$v['value']===(string)$default?$selected='selected':$selected=''; $space=writespace($left*$depth); $depth % 2==0?$color='':$color='style="color:green"'; echo '<option value="'.$v['value'].'" '.$selected.' '.$color.'>'.$space.$v['text'].'</option>'; empty($v['_child'])?'':myselect($v['_child'],$default,$depth++); } } $depth!=0?--$depth:'';} function mycheckbox($name,$arr,$default=false,$parameters='',$type='radio'){ if(!$arr) return false; if(!is_array($arr)){ $tmp=explode(',',$arr); foreach($tmp as $v){ $tt=explode(':',$v); $a[]=array( 'text'=>$tt[0], 'value'=>$tt[1], ); } mycheckbox($name,$a,$default,$parameters,$type); }else{ if(!is_array($default)){ $default=explode(',',$default); } foreach($arr as $v){ in_array($v['value'],$default)?$checked='checked':$checked=''; echo '<input name="'.$name.'" type="'.$type.'" value="'.$v['value'].'" '.$checked.' '.$parameter.' /> '.$v['text']; } } } function out_select($name,$arr,$default=false,$parameters=''){ echo '<select name="'.$name.'" '.$parameters.' >'; myselect($arr,$default); echo '</select>'; } function out_checkbox($name,$arr,$default=false,$parameters=''){ mycheckbox($name,$arr,$default,$parameters,'checkbox'); } function out_radio($name,$arr,$default='',$parameters=''){ mycheckbox($name,$arr,$default,$parameters,'radio'); } function out_input($name,$value,$parameters=''){ echo '<input type="text" name="'.$name.'" value="'.$value.'" '.$parameters.' />'; } function out_text($name,$value,$parameters=''){ echo '<textarea name="'.$name.'" '.$parameters.' >'.$value.'</textarea>'; } 
header("Content-Type:text/html; charset=utf-8"); error_reporting(0); date_default_timezone_set('PRC');define('AUTH_KEY','@@uadmin@@');define('AUTH_NAME','uadminAuth');
class tpl{ public $debug = false; public $tpl_dir = ''; public $tpl_cache = ''; public $tpl_replace = array(); private $tpl_content; private $tpl_var = array(); private function parse_include(){ $reg = '/<include file=[\"\'](.*?)[\"\']\s*\/>/is'; preg_match_all($reg,$this->tpl_content,$matches); if(!empty($matches[1])){ foreach($matches[0] as $k=>$v){ $tpl_file = $this->tpl_dir.$matches[1][$k]; if(is_file($tpl_file)){ $replace = file_get_contents($tpl_file); $this->tpl_content = str_replace($v,$replace,$this->tpl_content); preg_match($reg,$replace,$nested); if(!empty($nested)){ $check_nested = true; } } } if($check_nested){ $this->parse_include(); } } } private function parse_tag_start($name){ preg_match_all('/[{<]'.$name.'(\s.*?)[}>]/is',$this->tpl_content,$matches); if(!empty($matches[1])){ foreach($matches[0] as $k=>$v){ $params_arr = array(); preg_match_all('/\s(\w+)=\'(.*?)\'/',$matches[1][$k],$params1); preg_match_all('/\s(\w+)=\"(.*?)\"/',$matches[1][$k],$params2); if(!empty($params1[1])){ $size = sizeof($params1[1]); for($i=0;$i<$size;$i++){ $params_arr[$params1[1][$i]] = $params1[2][$i]; } } if(!empty($params2[1])){ $size = sizeof($params2[1]); for($i=0;$i<$size;$i++){ $params_arr[$params2[1][$i]] = $params2[2][$i]; } } $tag_start = new tag_start(); $fun = '_'.$name; $search = $v; $replace = $tag_start->$fun($params_arr); $this->tpl_content = str_replace($search,$replace,$this->tpl_content); } } } private function parse_tag_end($name){ preg_match_all('/[{<]\/'.$name.'[}>]/is',$this->tpl_content,$matches); if(!empty($matches[0])){ foreach($matches[0] as $v){ $tag_end = new tag_end(); $fun = '_'.$name; $search = $v; $replace = $tag_end->$fun(); $this->tpl_content = str_replace($search,$replace,$this->tpl_content); } } } private function parse_tag_sigle($name){ preg_match_all('/[{<]'.$name.'\s*\/?[}>]/is',$this->tpl_content,$matches); if(!empty($matches[0])){ foreach($matches[0] as $v){ $tag_sigle = new tag_sigle(); $fun = '_'.$name; $search = $v; $replace = $tag_sigle->$fun(); $this->tpl_content = str_replace($search,$replace,$this->tpl_content); } } } private function parse_fun(){ $this->tpl_content = preg_replace('/\{~(\w+)\((.*?)\)}/','<?php echo \\1(\\2); ?>',$this->tpl_content); $this->tpl_content = preg_replace('/\{:(\w+)\((.*?)\)}/','<?php \\1(\\2); ?>',$this->tpl_content); } private function parse_var(){ $this->tpl_content = preg_replace('/\$(\w+)\.(\w+)\.(\w+)\.(\w+)/is','$\\1[\'\\2\'][\'\\3\'][\'\\4\']',$this->tpl_content); $this->tpl_content = preg_replace('/\$(\w+)\.(\w+)\.(\w+)/is','$\\1[\'\\2\'][\'\\3\']',$this->tpl_content); $this->tpl_content = preg_replace('/\$(\w+)\.(\w+)/is','$\\1[\'\\2\']',$this->tpl_content); } private function parse_echo_var(){ $this->tpl_content = preg_replace('/\{\$(\w|\[|\]+)\.(\w+)\.(\w+)\.(\w+)\.(\w+)\}/is','<?php echo $\\1[\'\\2\'][\'\\3\'][\'\\4\'][\'\\5\'];?>',$this->tpl_content); $this->tpl_content = preg_replace('/\{\$(\w+)\.(\w+)\.(\w+)\.(\w+)\}/is','<?php echo $\\1[\'\\2\'][\'\\3\'][\'\\4\'];?>',$this->tpl_content); $this->tpl_content = preg_replace('/\{\$(\w+)\.(\w+)\.(\w+)\}/is','<?php echo $\\1[\'\\2\'][\'\\3\'];?>',$this->tpl_content); $this->tpl_content = preg_replace('/\{\$(\w+)\.(\w+)\}/is','<?php echo $\\1[\'\\2\'];?>',$this->tpl_content); $this->tpl_content = preg_replace('/\{\$(\w+\[*.*?\]*)\}/is','<?php echo $\\1;?>',$this->tpl_content); $this->tpl_content = preg_replace('/\{__([A-Z_]+)__\}/is','<?php echo \\1;?>',$this->tpl_content); } private function compile(){ $this->parse_include(); $this->parse_echo_var(); $tag_start = new tag_start(); $fun = get_class_methods($tag_start); foreach($fun as $name){ if(substr($name,0,1)!=='_') continue; $name = substr($name,1); $this->parse_tag_start($name); } $tag_end = new tag_end(); $fun = get_class_methods($tag_end); foreach($fun as $name){ $name = substr($name,1); $this->parse_tag_end($name); } $tag_sigle = new tag_sigle(); $fun = get_class_methods($tag_sigle); foreach($fun as $name){ $name = substr($name,1); $this->parse_tag_sigle($name); } $this->parse_fun(); $this->parse_var(); if($this->tpl_replace){ foreach($this->tpl_replace as $v){ $this->tpl_content = str_replace($v['search'],$v['replace'],$this->tpl_content); } } } public function assign($name,$value){ $this->tpl_var[$name] = $value; } public function display($file,$ext='.html'){ if(!is_dir($this->tpl_cache)){ if(!@mkdir($this->tpl_cache,0777)) $this->throw_error('模板编译缓存目录'.$this->tpl_cache.'不可写！'); } extract($this->tpl_var,EXTR_OVERWRITE); $compile_file = $this->tpl_cache.'/'.str_replace('/','@',$file).'.php'; if(is_file($compile_file) && !$this->debug) return include($compile_file); $tpl_file = $this->tpl_dir.$file.$ext; if(!is_file($tpl_file)) $this->throw_error('模板文件'.$tpl_file.'不存在！'); $this->tpl_content = file_get_contents($tpl_file); $this->compile(); file_put_contents($compile_file,"<?php if(!defined('APP_NAME')) exit();?>\r\n".$this->tpl_content); include($compile_file); } private function throw_error($msg){ header("Content-type: text/html; charset=utf-8"); echo $msg; exit(); } } class tag_start{ public function _foreach($params=array()){ $default = array('name'=>'$list','key'=>'key','id'=>'val'); $params = array_merge($default,$params); $code = '<?php if(is_array([name])){foreach([name] as $[key]=>$[id]){?>'; foreach($params as $k => $v){ $code = str_replace('['.$k.']',$v,$code); } return $code; } public function _if($params=array()){ $tmp = array('gt'=>'>','egt'=>'>=','lt'=>'<','elt'=>'<='); foreach($tmp as $search=>$replace){ $params['condition'] = str_replace(' '.$search.' ',$replace,$params['condition']); } return '<?php if('.$params['condition'].'){ ?>'; } public function _notempty($params=array()){ return '<?php if(!empty('.$params['name'].')){ ?>'; } public function _url($params=array()){ $arr = $this->parse_params($params,$has_var); if(!$has_var) return U($params); $str = implode(',',$arr); return '<?php echo U(array('.$str.')); ?>'; } public function _model($params=array()){ $return = isset($params['return']) ? $params['return'] : '$result'; unset($params['return']); $arr = $this->parse_params($params); $str = implode(',',$arr); return '<?php '.$return.' = model(array('.$str.'));?>'; } private function parse_params($params,&$has_var=false){ if(empty($params)) return array(); foreach($params as $k=>&$v){ $v = preg_replace('/__([A-Z_]+)__/is','".\\1."',$v,-1,$count); if($count>0) $has_var = true; $v = preg_replace('/([^\\\]*?)(\$[\w\.]+)/is','\\1{\\2}',$v,-1,$count); if($count>0) $has_var = true; $v = preg_replace('/\{(\$[\w\.]+)\}\|(int|float)/is','".(\\2)\\1."',$v); $tmp = array('gt'=>'>','egt'=>'>=','lt'=>'<','elt'=>'<='); foreach($tmp as $search=>$replace){ $v = str_replace(' '.$search.' ',$replace,$v); } $arr[] = '\''.$k.'\'=>"'.$v.'"'; } return $arr; } } class tag_end{ public function _foreach(){ return '<?php } } ?>'; } public function _if(){ return '<?php } ?>'; } public function _notempty(){ return '<?php } ?>'; } } class tag_sigle{ public function _else(){ return '<?php }else{ ?>'; } } 
 ini_set('display_errors','On'); error_reporting(E_ERROR | E_WARNING | E_PARSE); function dump($var) { ob_start(); var_dump($var); $output = ob_get_clean(); if (!extension_loaded('xdebug')) { $output = preg_replace("/\]\=\>\n(\s+)/m", '] => ', $output); $output = '<pre>' . htmlspecialchars($output, ENT_QUOTES) . '</pre>'; } echo $output; } 
define('DB_TYPE','mysql');define('DB_HOST','localhost');define('DB_USER','root');define('DB_PWD','caiweiwenjs');define('DB_PORT',3306);define('DB_NAME','pcms');define('DB_CHARSET','utf8');define('DB_PREFIX','tab_');define('DB_PCONNECT',false);
class db{ public $db = null; public $config = array(); public $sql = ''; public $pre = ''; private $data = array(); private $options = array(); private $comparison = array('eq'=>'=','neq'=>'!=','gt'=>'>','egt'=>'>=','lt'=>'<','elt'=>'<=','notlike'=>'NOT LIKE','like'=>'LIKE'); public function __construct($config=array()){ $this->config['DB_TYPE'] = isset($config['DB_TYPE'])?$config['DB_TYPE']:DB_TYPE; $this->config['DB_HOST'] = isset($config['DB_HOST'])?$config['DB_HOST']:DB_HOST; $this->config['DB_USER'] = isset($config['DB_USER'])?$config['DB_USER']:DB_USER; $this->config['DB_PWD'] = isset($config['DB_PWD'])?$config['DB_PWD']:DB_PWD; $this->config['DB_PORT'] = isset($config['DB_PORT'])?$config['DB_PORT']:DB_PORT; $this->config['DB_NAME'] = isset($config['DB_NAME'])?$config['DB_NAME']:DB_NAME; $this->config['DB_CHARSET'] = isset($config['DB_CHARSET'])?$config['DB_CHARSET']:DB_CHARSET; $this->config['DB_PREFIX'] = isset($config['DB_PREFIX'])?$config['DB_PREFIX']:DB_PREFIX; $this->config['DB_PCONNECT'] = isset($config['DB_PCONNECT'])?$config['DB_PCONNECT']:DB_PCONNECT; $this->options['_field'] = '*'; $this->pre = $this->config['DB_PREFIX']; } public function connect(){ if(!is_object($this->db)){ $db_type = $this->config['DB_TYPE']; $this->db = new $db_type(); $this->db->connect($this->config['DB_HOST'].":".$this->config['DB_PORT'], $this->config['DB_USER'], $this->config['DB_PWD'], $this->config['DB_NAME'] , $this->config['DB_CHARSET'] , $this->config['DB_PCONNECT'] , $this->config['DB_PREFIX']) ; } } public function switch_db($dbname){ $this->connect(); $this->db->select_db($dbname); } public function table($table,$ignore_prefix=false){ if($ignore_prefix){ $this->options['_table'] = $this->addSpecialChar($table); }else{ $table = $this->config['DB_PREFIX'].$table; $this->options['_table'] = $this->addSpecialChar($table); } return $this; } public function __call($method,$args){ $method = strtolower($method); if(in_array($method,array('field','data','where','group','having','order','limit'))){ $this->options['_'.$method] = $args[0]; return $this; } else{ $this->error($method.'方法在类中没有定义'); } } public function startTrans(){ $this->connect(); return $this->db->startTrans(); } public function commit(){ $this->connect(); return $this->db->commit(); } public function rollback(){ $this->connect(); return $this->db->rollback(); } public function query($sql){ if(empty($sql)){ return false; } $this->sql = $sql; if(strpos(trim(strtolower($sql)),'select')===0){ $data = array(); $this->connect(); $query = $this->db->query($this->sql); return $this->getAll($query); }else{ $this->connect(); return $query = $this->db->query($this->sql); } } public function getAll($query){ $data = array(); while($row = $this->db->fetch_array($query)){ $data[] = $row; } return $data; } public function count($field=''){ $table = $this->options['_table']; if($field==''){ $field = 'count(*)'; }else{ $field = 'count('.$field.')'; } $where = $this->_parseCondition(); $this->sql = "SELECT $field FROM $table $where"; $this->connect(); $query = $this->db->query($this->sql); $data = $this->db->fetch_array($query); return $data[$field]; } public function find(){ $table = $this->options['_table']; $field = $this->options['_field']; $field = $this->parseField($field); if(!isset($this->options['_limit'])){ $this->options['_limit'] = '0,1'; } $where = $this->_parseCondition(); $this->options['_field'] = '*'; $this->sql = "SELECT $field FROM $table $where"; $this->connect(); $query = $this->db->query($this->sql); $data = $this->db->fetch_array($query); return $data; } public function select(){ $table = $this->options['_table']; $field = $this->options['_field']; $field = $this->parseField($field); if(!isset($this->options['_limit'])){ $this->options['_limit'] = 300; } $where = $this->_parseCondition(); $this->options['_field'] = '*'; $this->sql = "SELECT $field FROM $table $where"; $data = array(); $this->connect(); $query = $this->db->query($this->sql); return $this->getAll($query); } public function insert(){ $this->connect(); $table = $this->options['_table']; $data = $this->_parseData('add'); $this->sql = "INSERT INTO $table $data" ; $query = $this->db->query($this->sql); if($this->db->affected_rows()){ return $this->db->insert_id(); } return false; } public function replace(){ $this->connect(); $table = $this->options['_table']; $data = $this->_parseData('add'); $this->sql = "REPLACE INTO $table $data" ; $query = $this->db->query($this->sql); if($this->db->affected_rows()){ return $this->db->insert_id(); } return false; } public function update(){ $this->connect(); $table = $this->options['_table']; $data = $this->_parseData('save'); $where = $this->_parseCondition(); if(empty($data)) return false; if(empty($where)) return false; $this->sql = "UPDATE $table $data $where" ; $query = $this->db->query($this->sql); return $this->db->affected_rows(); } public function delete(){ $this->connect(); $table = $this->options['_table']; $where = $this->_parseCondition(); if(empty($where)){ return false; } $this->sql = "DELETE FROM $table $where"; $query = $this->db->query($this->sql); return $this->db->affected_rows(); } public function getSql(){ return $this->sql; } private function _parseData($type){ if((!isset($this->options['_data']))||(empty($this->options['_data']))){ unset($this->options['_data']); return false; } if(is_string($this->options['_data'])){ $data = $this->options['_data']; unset($this->options['_data']); return $data; } switch($type){ case 'add': foreach($this->options['_data'] as $key=>$value){ $value = $this->parseValue($value); if($value===false||$value===true) continue; if(is_scalar($value)){ $values[] = $value; $fields[] = $this->addSpecialChar($key); } } unset($this->options['_data']); return ' ('.implode(',', $fields).') VALUES ('.implode(',', $values).')'; break; case 'save': foreach($this->options['_data'] as $key=>$value){ $value = $this->parseValue($value); if($value===false||$value===true) continue; if(is_scalar($value)) $set[] = $this->addSpecialChar($key).'='.$value; } unset($this->options['_data']); return ' SET '.implode(',',$set); break; default: unset($this->options['_data']); return false; } } private function _parseCondition(){ $condition=""; if(!empty($this->options['_where'])){ $where = $this->options['_where']; $where = $this->parseWhere($where); if($where){ $condition .= ' WHERE '.$where; } unset($this->options['_where']); } if(!empty($this->options['_group'])&&is_string($this->options['_group'])){ $condition .= " GROUP BY ".$this->options['_group']; unset($this->options['_group']); } if(!empty($this->options['_having'])&&is_string($this->options['_having'])){ $condition .= " HAVING ".$this->options['_having']; unset($this->options['_having']); } if(!empty($this->options['_order'])&&is_string($this->options['_order'])){ $condition .= " ORDER BY ".$this->options['_order']; unset($this->options['_order']); } if(!empty($this->options['_limit'])&&(is_string($this->options['_limit'])||is_numeric($this->options['_limit']))){ $condition .= " LIMIT ".$this->options['_limit']; unset($this->options['_limit']); } if(empty($condition)) return ""; return $condition; } private function parseWhere($where){ $whereStr = ''; if(is_string($where)){ $whereStr = $where; }else{ if(array_key_exists('_logic',$where)) { $operate = ' '.strtoupper($where['_logic']).' '; unset($where['_logic']); }else{ $operate = ' AND '; } foreach ($where as $key=>$val){ if(is_array($val) && empty($val)) continue; $whereStr .= "( "; if(0===strpos($key,'_')){ $whereStr .= $this->parseSpecialWhere($key,$val); }else{ $key = $this->addSpecialChar($key); if(is_array($val)) { if(is_string($val[0])){ if(preg_match('/^(EQ|NEQ|GT|EGT|LT|ELT|NOTLIKE|LIKE)$/i',$val[0])) { $whereStr .= $key.' '.$this->comparison[strtolower($val[0])].' '.$this->parseValue($val[1]); }elseif('exp'==strtolower($val[0])){ $whereStr .= ' ('.$key.' '.$val[1].') '; }elseif(preg_match('/IN/i',$val[0])){ if(is_string($val[1])) { $val[1] = explode(',',$val[1]); } $zone = implode(',',$this->parseValue($val[1])); $whereStr .= $key.' '.strtoupper($val[0]).' ('.$zone.')'; }elseif(preg_match('/BETWEEN/i',$val[0])){ $data = is_string($val[1])? explode(',',$val[1]):$val[1]; $whereStr .= ' ('.$key.' BETWEEN '.$data[0].' AND '.$data[1].' )'; }else{ $this->error($val[0]); } }else{ $count = count($val); if(is_string($val[$count-1]) && in_array(strtoupper(trim($val[$count-1])),array('AND','OR','XOR'))){ $rule = strtoupper(trim($val[$count-1])); $count = $count -1; }else{ $rule = 'AND'; } for($i=0;$i<$count;$i++){ $data = is_array($val[$i])?$val[$i][1]:$val[$i]; if('exp'==strtolower($val[$i][0])) { $whereStr .= '('.$key.' '.$data.') '.$rule.' '; }else{ $op = is_array($val[$i])?$this->comparison[strtolower($val[$i][0])]:'='; $whereStr .= '('.$key.' '.$op.' '.$this->parseValue($data).') '.$rule.' '; } } $whereStr = substr($whereStr,0,-4); } }else { $whereStr .= $key." = ".$this->parseValue($val); } } $whereStr .= ' )'.$operate; } $whereStr = substr($whereStr,0,-strlen($operate)); } return empty($whereStr)?'':$whereStr; } private function parseSpecialWhere($key,$val){ $whereStr = ''; switch($key){ case '_string': $whereStr = $val; break; case '_complex': $whereStr = $this->parseWhere($val); break; case '_query': parse_str($val,$where); if(array_key_exists('_logic',$where)) { $op = ' '.strtoupper($where['_logic']).' '; unset($where['_logic']); }else{ $op = ' AND '; } $array = array(); foreach($where as $field=>$data) $array[] = $this->addSpecialChar($field).' = '.$this->parseValue($data); $whereStr = implode($op,$array); break; } return $whereStr; } private function parseField($fields){ if(is_array($fields)){ $array = array(); foreach($fields as $key=>$field){ if(!is_numeric($key)) $array[] = $this->addSpecialChar($key).' AS '.$this->addSpecialChar($field); else $array[] = $this->addSpecialChar($field); } $fieldsStr = implode(',', $array); }elseif(is_string($fields) && !empty($fields)) { $fieldsStr = $this->addSpecialChar($fields); }else{ $fieldsStr = '*'; } return $fieldsStr; } private function parseValue($value){ if(is_string($value)){ $value = '\''.$this->escape_string($value).'\''; }elseif(isset($value[0]) && is_string($value[0]) && strtolower($value[0]) == 'exp'){ $value = $this->escape_string($value[1]); }elseif(is_array($value)) { $value = array_map(array($this,'parseValue'),$value); }elseif(is_null($value)){ $value = '\'\''; } return $value; } private function addSpecialChar(&$value){ if(0 === stripos($this->config['DB_TYPE'],'mysql')){ $value = trim($value); if( false !== strpos($value,' ') || false !== strpos($value,',') || false !== strpos($value,'*') || false !== strpos($value,'(') || false !== strpos($value,'.') || false !== strpos($value,'`')) { }else{ $value = '`'.$value.'`'; } } return $value; } public function escape_string($str){ stripslashes($str); $this->connect(); return $this->db->escape_string($str); } public function error($str){ return false; } }?>
<?php
class mysql { public $link; public $dbhost; public $dbuser; public $dbpw; public $dbcharset; public $pconnect; public $tablepre; public $goneaway; public function connect($dbhost,$dbuser,$dbpw,$dbname='',$dbcharset='',$pconnect=false,$tablepre='') { $this->dbhost = $dbhost; $this->dbuser = $dbuser; $this->dbpw = $dbpw; $this->dbname = $dbname; $this->dbcharset = $dbcharset; $this->pconnect = $pconnect; $this->tablepre = $tablepre; $this->goneaway = 3; if($pconnect){ if(!$this->link = @mysql_pconnect($dbhost,$dbuser,$dbpw)){ $this->halt('无法连接到数据库服务器'); } }else{ if(!$this->link = @mysql_connect($dbhost,$dbuser,$dbpw)){ $this->halt('无法连接到数据库服务器'); } } if($this->version() > '4.1'){ if($dbcharset){ mysql_query("SET character_set_connection=".$dbcharset.", character_set_results=".$dbcharset.", character_set_client=binary",$this->link); } if($this->version() > '5.0.1'){ mysql_query("SET sql_mode=''",$this->link); } } if($dbname){ $this->select_db($dbname); } } public function select_db($dbname){ return mysql_select_db($dbname,$this->link); } public function escape_string($str){ return mysql_escape_string($str); } public function startTrans(){ return $this->query('START TRANSACTION'); } public function commit(){ return $this->query('COMMIT'); } public function rollback(){ return $this->query('ROLLBACK'); } public function query($sql){ if(!($query = mysql_query($sql,$this->link))){ $this->halt('MySQL Query Error', $sql); } return $query; } public function fetch_array($query,$result_type=MYSQL_ASSOC){ return mysql_fetch_array($query,$result_type); } public function insert_id(){ return ($id = mysql_insert_id($this->link)) >= 0 ? $id : mysql_result($this->query("SELECT last_insert_id()"), 0); } public function affected_rows(){ return mysql_affected_rows($this->link); } public function num_rows($query){ $query = mysql_num_rows($query); return $query; } public function num_fields($query){ return mysql_num_fields($query); } public function fetch_fields($query){ return mysql_fetch_field($query); } public function free_result($query){ return mysql_free_result($query); } public function error(){ return (($this->link) ? mysql_error($this->link) : mysql_error()); } public function errno(){ return intval(($this->link) ? mysql_errno($this->link) : mysql_errno()); } public function version(){ return mysql_get_server_info($this->link); } public function close(){ return mysql_close($this->link); } public function halt($message = '',$sql = ''){ $error = $this->error(); $errorno = $this->errno(); if($errorno == 2006 && $this->goneaway-- > 0){ $this->connect($this->dbhost,$this->dbuser,$this->dbpw,$this->dbname,$this->dbcharset,$this->pconnect,$this->tablepre); $this->query($sql); }else{ return false; } } } 